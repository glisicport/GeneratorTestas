{
  "chapters" : [ {
    "name" : "Osnovni tipovi podataka i operatori",
    "questions" : [ {
      "type" : "multiple_choice",
      "question" : "Koji od navedenih nije primitivni tip podataka u Javi?",
      "options" : [ "int", "double", "String", "char" ],
      "correct_answer" : "String"
    }, {
      "type" : "multiple_choice",
      "question" : "Koji operator se koristi za celobrojno deljenje u Javi?",
      "options" : [ "/", "//", "%", "\\" ],
      "correct_answer" : "/"
    }, {
      "type" : "fill_in_the_blank",
      "question" : "Rezultat izraza 5 % 2 je ___.",
      "correct_answer" : "1"
    }, {
      "type" : "multiple_choice",
      "question" : "Koji je rezultat sledećeg koda?",
      "code" : "int a = 5;\nint b = 2;\ndouble result = a / b;\nSystem.out.println(result);",
      "options" : [ "2.0", "2.5", "2", "2.2" ],
      "correct_answer" : "2.0"
    }, {
      "code" : null,
      "question" : "zdravo",
      "options" : [ "gde_si", "popio_sam" ],
      "correct_answer" : "gde_si",
      "type" : "multiple_choice"
    }, {
      "code" : null,
      "question" : "Funkcionalnost programiranja je ___ i ona pravi ___ test.",
      "options" : null,
      "correct_answers" : [ "dobra", "dobar" ],
      "type" : "fill_in_the_blank"
    } ]
  }, {
    "name" : "Kontrola toka programa",
    "questions" : [ {
      "type" : "multiple_choice",
      "question" : "Koja petlja se uvek izvršava bar jednom?",
      "options" : [ "while", "do-while", "for", "foreach" ],
      "correct_answer" : "do-while"
    }, {
      "type" : "fill_in_the_blank",
      "question" : "Ključna reč ___ se koristi za prekid izvršavanja petlje.",
      "correct_answer" : "break"
    }, {
      "code" : null,
      "question" : "luka je ___.",
      "options" : [ ],
      "correct_answer" : "car",
      "type" : "fill_in_the_blank"
    } ]
  }, {
    "name" : "Klase i objekti",
    "questions" : [ {
      "type" : "multiple_choice",
      "question" : "Šta je objekat?",
      "options" : [ "Instanca klase", "Tip podatka", "Metoda klase", "Promenljiva" ],
      "correct_answer" : "Instanca klase"
    }, {
      "type" : "fill_in_the_blank",
      "question" : "Ključna reč ___ se koristi za kreiranje novog objekta.",
      "correct_answer" : "new"
    }, {
      "type" : "multiple_choice",
      "question" : "Koji je rezultat sledećeg koda?",
      "code" : "class Test {\n    int x;\n    public static void main(String[] args) {\n        Test t = new Test();\n        System.out.println(t.x);\n    }\n}",
      "options" : [ "null", "0", "undefined", "compilation error" ],
      "correct_answer" : "0"
    } ]
  }, {
    "name" : "Konstruktori i destruktori",
    "questions" : [ {
      "type" : "multiple_choice",
      "question" : "Koji konstruktor se automatski kreira ako ne definišemo nijedan konstruktor u klasi?",
      "options" : [ "Prazan konstruktor", "Kopija konstruktor", "Parametrizovani konstruktor", "Nijedan" ],
      "correct_answer" : "Prazan konstruktor"
    }, {
      "type" : "multiple_choice",
      "question" : "Koja metoda se poziva pre nego što Garbage Collector oslobodi memoriju objekta?",
      "options" : [ "dispose()", "destroy()", "finalize()", "delete()" ],
      "correct_answer" : "finalize()"
    }, {
      "type" : "fill_in_the_blank",
      "question" : "Konstruktor mora imati isto ___ kao i klasa.",
      "correct_answer" : "ime"
    } ]
  }, {
    "name" : "Nasleđivanje",
    "questions" : [ {
      "type" : "multiple_choice",
      "question" : "Koja ključna reč se koristi za nasleđivanje u Javi?",
      "options" : [ "extends", "implements", "inherits", "using" ],
      "correct_answer" : "extends"
    }, {
      "type" : "multiple_choice",
      "question" : "Koliko direktnih nadklasa može imati jedna klasa u Javi?",
      "options" : [ "Nijednu", "Jednu", "Dve", "Neograničeno" ],
      "correct_answer" : "Jednu"
    }, {
      "type" : "fill_in_the_blank",
      "question" : "Ključna reč ___ se koristi za pozivanje konstruktora nadklase.",
      "correct_answer" : "super"
    } ]
  }, {
    "name" : "Polimorfizam",
    "questions" : [ {
      "type" : "multiple_choice",
      "question" : "Šta od navedenog nije primer polimorfizma?",
      "options" : [ "Preopterećenje metoda", "Preklapanje metoda", "Privatne metode", "Dinamičko povezivanje" ],
      "correct_answer" : "Privatne metode"
    }, {
      "type" : "multiple_choice",
      "question" : "Koji tip polimorfizma se ostvaruje u vreme izvršavanja programa?",
      "options" : [ "Preopterećenje metoda", "Preklapanje metoda", "Oba", "Nijedan" ],
      "correct_answer" : "Preklapanje metoda"
    }, {
      "type" : "multiple_choice",
      "question" : "Šta će ispisati sledeći kod?",
      "code" : "class Animal {\n    void makeSound() { System.out.println(\"Animal\"); }\n}\nclass Dog extends Animal {\n    void makeSound() { System.out.println(\"Dog\"); }\n}\nAnimal a = new Dog();\na.makeSound();",
      "options" : [ "Animal", "Dog", "Greška u kompajliranju", "Ništa" ],
      "correct_answer" : "Dog"
    } ]
  }, {
    "name" : "Apstrakcija",
    "questions" : [ {
      "type" : "multiple_choice",
      "question" : "Koja ključna reč se koristi za definisanje apstraktne klase?",
      "options" : [ "abstract", "virtual", "static", "final" ],
      "correct_answer" : "abstract"
    }, {
      "type" : "multiple_choice",
      "question" : "Da li apstraktna klasa može imati konstruktor?",
      "options" : [ "Da", "Ne", "Samo default konstruktor", "Samo private konstruktor" ],
      "correct_answer" : "Da"
    }, {
      "type" : "fill_in_the_blank",
      "question" : "Apstraktna metoda ne može biti označena kao ___.",
      "correct_answer" : "final"
    } ]
  }, {
    "name" : "Interfejsi i višestruko nasleđivanje",
    "questions" : [ {
      "type" : "multiple_choice",
      "question" : "Koje od navedenih tvrđenja je tačno za interfejse?",
      "options" : [ "Mogu imati implementaciju metoda", "Mogu imati konstruktore", "Mogu imati promenljive instance", "Sve promenljive su automatski public static final" ],
      "correct_answer" : "Sve promenljive su automatski public static final"
    }, {
      "type" : "multiple_choice",
      "question" : "Koliko interfejsa može implementirati jedna klasa?",
      "options" : [ "Nijedan", "Jedan", "Dva", "Neograničeno" ],
      "correct_answer" : "Neograničeno"
    }, {
      "type" : "fill_in_the_blank",
      "question" : "Od Java 8, interfejsi mogu imati metode sa implementacijom ako su označene ključnom rečju ___.",
      "correct_answer" : "default"
    } ]
  }, {
    "name" : "Paketi i modifikatori pristupa",
    "questions" : [ {
      "type" : "multiple_choice",
      "question" : "Koji modifikator pristupa omogućava pristup samo unutar istog paketa?",
      "options" : [ "public", "private", "protected", "default (package-private)" ],
      "correct_answer" : "default (package-private)"
    }, {
      "type" : "multiple_choice",
      "question" : "Koja ključna reč se koristi za uvoz svih klasa iz paketa?",
      "code" : "package com.example;\n// Koja ključna reč ide ovde: ___ com.example.subpackage.*;",
      "options" : [ "import", "include", "using", "package" ],
      "correct_answer" : "import"
    }, {
      "type" : "fill_in_the_blank",
      "question" : "Modifikator ___ omogućava pristup članovima klase iz podklasa i istog paketa.",
      "correct_answer" : "protected"
    } ]
  }, {
    "name" : "Static i final ključne reči",
    "questions" : [ {
      "type" : "multiple_choice",
      "question" : "Šta je tačno za statičke metode?",
      "options" : [ "Mogu pristupiti nestatičkim članovima direktno", "Ne mogu pristupiti nestatičkim članovima direktno", "Mogu biti preopterećene", "Mogu biti preklopljene" ],
      "correct_answer" : "Ne mogu pristupiti nestatičkim članovima direktno"
    }, {
      "type" : "multiple_choice",
      "question" : "Šta će ispisati sledeći kod?",
      "code" : "class Test {\n    static int x = 0;\n    static {\n        x = 1;\n    }\n    public static void main(String[] args) {\n        System.out.println(x);\n    }\n}",
      "options" : [ "0", "1", "null", "compilation error" ],
      "correct_answer" : "1"
    }, {
      "type" : "fill_in_the_blank",
      "question" : "Final promenljiva mora biti inicijalizovana ___ (pre/posle) prvog korišćenja.",
      "correct_answer" : "pre"
    } ]
  }, {
    "name" : "Enkapsulacija i getter/setter metode",
    "questions" : [ {
      "type" : "multiple_choice",
      "question" : "Koji je najbolji način za pristup private promenljivama iz druge klase?",
      "options" : [ "Getter i setter metode", "Učiniti ih public", "Koristiti protected", "Koristiti package-private" ],
      "correct_answer" : "Getter i setter metode"
    }, {
      "type" : "multiple_choice",
      "question" : "Koja je konvencija za imenovanje getter metoda za boolean promenljive?",
      "options" : [ "getProperty", "isProperty", "hasProperty", "property" ],
      "correct_answer" : "isProperty"
    }, {
      "type" : "fill_in_the_blank",
      "question" : "Enkapsulacija je princip koji kombinuje ___ i ___ podataka u jednu celinu.",
      "correct_answer" : "podatke, metode"
    } ]
  }, {
    "name" : "Izuzeci (Exception handling)",
    "questions" : [ {
      "type" : "multiple_choice",
      "question" : "Koja klasa je osnovna klasa za sve izuzetke u Javi?",
      "options" : [ "Exception", "Throwable", "Error", "RuntimeException" ],
      "correct_answer" : "Throwable"
    }, {
      "type" : "multiple_choice",
      "question" : "Koji blok se uvek izvršava, bez obzira da li je došlo do izuzetka?",
      "options" : [ "try", "catch", "finally", "throw" ],
      "correct_answer" : "finally"
    }, {
      "type" : "multiple_choice",
      "question" : "Šta će se desiti u sledećem kodu?",
      "code" : "try {\n    int[] arr = new int[5];\n    arr[5] = 10;\n} catch(Exception e) {\n    System.out.println(\"Exception\");\n} catch(ArrayIndexOutOfBoundsException e) {\n    System.out.println(\"Array Index\");\n}",
      "options" : [ "Ispisaće 'Exception'", "Ispisaće 'Array Index'", "Neće se kompajlirati", "Runtime error" ],
      "correct_answer" : "Neće se kompajlirati"
    } ]
  }, {
    "name" : "Kolekcije i generički tipovi",
    "questions" : [ {
      "type" : "multiple_choice",
      "question" : "Koji interfejs je na vrhu hijerarhije kolekcija u Javi?",
      "options" : [ "Collection", "List", "Set", "Map" ],
      "correct_answer" : "Collection"
    }, {
      "type" : "multiple_choice",
      "question" : "Šta nije dozvoljeno u generičkim tipovima?",
      "options" : [ "Kreiranje instance generičkog tipa", "Kreiranje niza generičkog tipa", "Korišćenje wildcard karaktera", "Nasleđivanje generičkih klasa" ],
      "correct_answer" : "Kreiranje niza generičkog tipa"
    }, {
      "type" : "fill_in_the_blank",
      "question" : "Simbol ___ se koristi za označavanje wild card tipa u generičkim klasama.",
      "correct_answer" : "?"
    } ]
  }, {
    "name" : "Array i ArrayList",
    "questions" : [ {
      "type" : "multiple_choice",
      "question" : "Koja je glavna razlika između Array i ArrayList?",
      "options" : [ "Array je primitivni tip", "ArrayList je thread-safe", "Array ima fiksnu veličinu", "ArrayList je brži" ],
      "correct_answer" : "Array ima fiksnu veličinu"
    }, {
      "type" : "multiple_choice",
      "question" : "Koji je ispravan način deklaracije ArrayList-e?",
      "options" : [ "ArrayList<String> list = new ArrayList<String>();", "ArrayList<String> list = new ArrayList<>();", "ArrayList list = new ArrayList();", "Sve navedeno je tačno" ],
      "correct_answer" : "Sve navedeno je tačno"
    }, {
      "type" : "fill_in_the_blank",
      "question" : "Metoda ___ se koristi za dodavanje elementa u ArrayList.",
      "correct_answer" : "add"
    } ]
  }, {
    "name" : "Mape i skupovi",
    "questions" : [ {
      "type" : "multiple_choice",
      "question" : "Koja implementacija Map interfejsa održava sortirani redosled ključeva?",
      "options" : [ "HashMap", "TreeMap", "LinkedHashMap", "Hashtable" ],
      "correct_answer" : "TreeMap"
    }, {
      "type" : "multiple_choice",
      "question" : "Koja je vremenska složenost operacije get() kod HashMap-e?",
      "options" : [ "O(1)", "O(n)", "O(log n)", "O(n log n)" ],
      "correct_answer" : "O(1)"
    }, {
      "type" : "fill_in_the_blank",
      "question" : "HashSet koristi ___ interno za čuvanje podataka.",
      "correct_answer" : "HashMap"
    } ]
  }, {
    "name" : "Lambda izrazi",
    "questions" : [ {
      "type" : "multiple_choice",
      "question" : "Koji je minimalni broj parametara koji lambda izraz mora imati?",
      "options" : [ "0", "1", "2", "3" ],
      "correct_answer" : "0"
    }, {
      "type" : "multiple_choice",
      "question" : "Šta će ispisati sledeći kod?",
      "code" : "List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5);\nnumbers.forEach(n -> System.out.print(n * 2));",
      "options" : [ "2 4 6 8 10", "1 2 3 4 5", "Error", "Ništa" ],
      "correct_answer" : "2 4 6 8 10"
    }, {
      "type" : "fill_in_the_blank",
      "question" : "Lambda izraz je implementacija ___ funkcionalnog interfejsa.",
      "correct_answer" : "jednog"
    } ]
  }, {
    "name" : "teorijaUspesnosti",
    "questions" : [ ]
  } ],
  "metadata" : {
    "classNames" : [ "Animal", "Dog", "Cat", "Person", "Employee", "Product" ],
    "methodNames" : [ "sound", "calculateSalary", "printDetails", "getAge", "addProduct" ],
    "returnTypes" : [ "void", "int", "String", "double" ],
    "exceptionTypes" : [ "NullPointerException", "ArrayIndexOutOfBoundsException", "IOException" ]
  }
}